#!/bin/sh

# mise description="launch local infrastructure"
# mise tools=["terraform", "kubectl"]

set -e

BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

cd $root

CLUSTER_NAME=pocketsizefund-local

command_exists() {
  command -v "$1" >/dev/null 2>&1
}

echo "${BLUE}Checking and installing dependencies...${NC}"
if ! command_exists docker; then
  echo "${RED}Docker not found. Please install Docker first: https://docs.docker.com/get-docker/${NC}"
  exit 1
fi

if ! command_exists kubectl; then
  echo "${GREEN}Installing kubectl, this is the cli for interacting with k8s${NC}"
  if [ "$(uname)" = "Darwin" ]; then
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl"
  else
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  fi
  chmod +x kubectl
  sudo mv kubectl /usr/local/bin/
fi

if ! command_exists k9s; then
  echo "${GREEN}Installing k9s, this is kubectl with flair...${NC}"
  curl -sS https://webinstall.dev/k9s | bash
fi

if ! command_exists kind; then
  KIND_VERSION="v0.24.0"
  echo "${GREEN}Installing kind...${NC}"
  go install sigs.k8s.io/kind@${KIND_VERSION}
fi

echo "${BLUE}Dependencies installed, setting up cluster..."
echo "Checking if Kind cluster already exists...${NC}"

if ! kind get clusters | grep -q "${CLUSTER_NAME}"; then
  echo "${GREEN}Creating Kind cluster...${NC}"
  cat <<EOF | kind create cluster --name "${CLUSTER_NAME}" --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry]
    config_path = "/etc/containerd/certs.d"
EOF
fi

echo "${BLUE}Configuring nodes...${NC}"
REGISTRY_DIR="/etc/containerd/certs.d/localhost:${reg_port}"
for node in $(kind get nodes --name "${CLUSTER_NAME}"); do
  echo "${BLUE}Configuring node: ${node}${NC}"
  if ! docker exec "${node}" mkdir -p "${REGISTRY_DIR}"; then
    echo "${YELLOW}Failed to create directory on node ${node}. Continuing...${NC}"
  fi
  if ! cat <<EOF | docker exec -i "${node}" cp /dev/stdin "${REGISTRY_DIR}/hosts.toml"
[host."http://${reg_name}:5000"]
EOF
  then
    echo "${YELLOW}Failed to copy hosts.toml to node ${node}. Continuing...${NC}"
  fi
done

echo "${BLUE}Creating namespace=live if it doesn't exist...${NC}"
kubectl create namespace live --dry-run=client -o yaml | kubectl apply -f -

echo "${BLUE}Creating platform secrets...${NC}"
kubectl delete secret platform --ignore-not-found=true
kubectl create secret generic platform --from-env-file=etc/.env.live

if ! command_exists kn; then
  echo "${GREEN}Installing Knative...${NC}"
  git clone https://github.com/knative/client.git
  pushd client/
  hack/build.sh -f
  sudo mv kn /usr/local/bin
  popd
  rm -rf client
  echo "${GREEN}Knative installed, version:${NC}"
  kn version
fi

if ! command_exists kn-quickstart; then
  echo "${GREEN}Installing Knative quickstart...{$NC}"
  git clone https://github.com/knative-extensions/kn-plugin-quickstart.git
  pushd kn-plugin-quickstart/
  hack/build.sh
  sudo mv kn-quickstart /usr/local/bin
  popd
  rm -rf kn-plugin-quickstart
  kn quickstart --help
fi

kn quickstart kind
kind get clusters

echo "${BLUE}Setting up platform services...${NC}"

pushd infrastructure/platform

for file in $(ls *.yaml); do
  kubectl apply -f $file
done

popd

echo "\n${BLUE}Setup complete. To use this cluster, run:\n"
echo "${GREEN}kubectl cluster-info --context kind-${CLUSTER_NAME}\n"
echo "${BLUE}To delete this cluster, run:"
echo "${RED}kind delete cluster --name ${CLUSTER_NAME}${NC}"
