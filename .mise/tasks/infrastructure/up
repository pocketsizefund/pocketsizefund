#!/usr/bin/env sh

# mise description="launch infrastructure"

cd $root/infrastructure
CLUSTER_NAME=$(grep 'name:' aws/cluster-config.yaml | awk '{print $2}')
AWS_REGION=$(grep 'region:' aws/cluster-config.yaml | awk '{print $2}')

BUCKET_SECRETS=$(aws secretsmanager get-secret-value --secret-id buckets | jq -r .SecretString | jq)
FUND_DATA_BUCKET=$(jq -r .FUND_DATA_BUCKET <<< $BUCKET_SECRETS)
FUND_ARTIFACTS_BUCKET=$(jq -r .FUND_ARTIFACTS_BUCKET <<< $BUCKET_SECRETS)

aws s3 mb s3://$FUND_DATA_BUCKET --region $AWS_REGION
aws s3 mb s3://$FUND_ARTIFACTS_BUCKET --region $AWS_REGION

 if eksctl get cluster --name=$CLUSTER_NAME 2>/dev/null; then
   echo "Cluster $CLUSTER_NAME already exists. Updating..."
   eksctl update cluster -f aws/cluster-config.yaml
else
  echo "Creating new cluster $CLUSTER_NAME..."
  eksctl create cluster -f aws/cluster-config.yaml
fi

kubectl create namespace monitoring

SECRETS=$(aws secretsmanager get-secret-value --secret-id platform | jq -r .SecretString | jq)
APCA_API_KEY_ID=$(jq -r .APCA_API_KEY_ID <<< $SECRETS)
ALPACA_API_SECRET=$(jq -r .ALPACA_API_SECRET <<< $SECRETS)
APCA_API_SECRET_KEY=$(jq -r .APCA_API_SECRET_KEY <<< $SECRETS)
APCA_API_BASE_URL=$(jq -r .APCA_API_BASE_URL <<< $SECRETS)
ALPHA_VANTAGE_API_KEY=$(jq -r .ALPHA_VANTAGE_API_KEY <<< $SECRETS)
EDGAR_USER_AGENT=$(jq -r .EDGAR_USER_AGENT <<< $SECRETS)
DARQUBE_API_KEY=$(jq -r .DARQUBE_API_KEY <<< $SECRETS)
DISCORD_WEBHOOK_URL=$(jq -r .DISCORD_WEBHOOK_URL <<< $SECRETS)

kubectl create secret generic platform \
    --from-literal="ALPACA_API_KEY=$ALPACA_API_SECRET" \
    --from-literal="ALPACA_API_SECRET=$ALPACA_API_SECRET" \
    --from-literal="APCA_API_KEY_ID=$APCA_API_KEY_ID" \
    --from-literal="APCA_API_SECRET_KEY=$APCA_API_SECRET_KEY" \
    --from-literal="APCA_API_BASE_URL=$APCA_API_BASE_URL" \
    --from-literal="ALPHA_VANTAGE_API_KEY=$ALPHA_VANTAGE_API_KEY" \
    --from-literal="EDGAR_USER_AGENT=$EDGAR_USER_AGENT" \
    --from-literal="DARQUBE_API_KEY=$DARQUBE_API_KEY" \
    --from-literal="DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL" \
    --from-literal="FUND_DATA_BUCKET=$FUND_DATA_BUCKET" \
    --from-literal="FUND_ARTIFACTS_BUCKET=$FUND_ARTIFACTS_BUCKET"

kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.9.0/serving-crds.yaml | kubectl colorize-applied
kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.9.0/serving-core.yaml | kubectl colorize-applied
kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.9.0/eventing-crds.yaml | kubectl colorize-applied
kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.9.0/eventing-core.yaml | kubectl colorize-applied
kubectl apply -f https://github.com/knative/net-kourier/releases/download/knative-v1.9.0/kourier.yaml | kubectl colorize-applied
kubectl patch configmap/config-network \
  --namespace knative-serving \
  --type merge \
  --patch '{"data":{"ingress-class":"kourier.ingress.networking.knative.dev"}}' | kubectl colorize-applied
kubectl apply -f knative/broker.yaml | kubectl colorize-applied

MONITORING_SECRETS=$(aws secretsmanager get-secret-value --secret-id monitoring | jq -r .SecretString | jq)
GRAFANA_ADMIN_PASSWORD=$(jq -r .GRAFANA_ADMIN_PASSWORD <<< $MONITORING_SECRETS)

helm install prometheus prometheus-community/kube-prometheus-stack \
  --namespace monitoring \
  --create-namespace \
  --set grafana.service.type=ClusterIP \
  --set prometheus.service.type=ClusterIP \
  --set alertmanager.service.type=ClusterIP \
  --set grafana.adminEnabled=true \
  --set grafana.adminUser=admin \
  --set grafana.adminPassword="$GRAFANA_ADMIN_PASSWORD" \
  --set grafana.adminPassword.forceUpdate=true

cd $root/platform
find . -name manifest.yaml -type f | while read -r file; do
  echo "Applying $file"
  kubectl apply -f "$file" | kubectl colorize-applied
done

aws eks update-kubeconfig --region $AWS_REGION --name $FUND_CLUSTER_NAME

echo "Grafana admin password: $GRAFANA_ADMIN_PASSWORD"
