[env]
COMPOSE_BAKE=true

[tasks."python:install"]
description = "Install Python dependencies"
run = "uv sync --all-packages"

[tasks."python:format"]
description = "Format Python code"
run = "ruff format"

[tasks."python:dead-code"]
depends = ["python:format"]
description = "Check for dead Python code"
run = """
uvx vulture \
    --min-confidence 80 \
    --exclude '.flox,.venv,target' \
    .
"""

[tasks."python:lint"]
depends = ["python:dead-code"]
description = "Run Python code quality checks"
# temporarily commented out ty check due to hanging failure
run = """
ruff check \
    --output-format=github \
    .
# uvx ty check
"""

[tasks."python:test"]
description = "Run Python tests"
run = """
mkdir -p coverage_output
docker compose --file tests.yaml down --volumes --remove-orphans
docker compose --file tests.yaml build tests
docker compose --file tests.yaml run --rm --no-TTY tests
docker compose --file tests.yaml down --volumes --remove-orphans
"""

[tasks."application:service:run:production"]
description = "Run the application service"
run = """
docker run \
--env-file .env \
--publish 8080:8080 \
pocketsizefund/{{arg(name="application_name")}}:latest \
"""

[tasks."application:service:run:development"]
description = "Run the application service locally with hot reloading"
run = """
cd application/{{arg(name="service_name")}}
uv run uvicorn src.{{arg(name="service_name")}}.main:application --reload
"""

[tasks."application:service:test:integration"]
description = "Run integration tests"
run = """
cd application/{{arg(name="service_name")}}
docker compose up --build --abort-on-container-exit --remove-orphans
"""

[tasks."application:service:test:behavioral"]
description = "Run behavioral tests"
run = """
cd application/{{arg(name="service_name")}}
docker compose up --build --abort-on-container-exit
"""

[tasks."application:service:cleanup:behavioral"]
description = "Clean up behavioral tests"
run = """
cd application/{{arg(name="service_name")}}
docker compose down -v
"""

[tasks."lint"]
depends = ["python:lint"]
description = "Run code quality checks"
run = """
nu linter.nu
yamllint -d "{extends: relaxed, rules: {line-length: {max: 110}}}" . 
"""

[tasks."infrastructure:up"]
description = "launch cloud infrastructure"
run = """
cd infrastructure
uv run pulumi up --yes
nu ping.nu
"""
