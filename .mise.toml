[env]
COMPOSE_BAKE = true

[tasks."python:install"]
description = "Install Python dependencies"
run = "uv sync --all-packages --all-groups"

[tasks."python:format"]
description = "Format Python code"
run = "ruff format"

[tasks."python:dead-code"]
depends = ["python:format"]
description = "Check for dead Python code"
run = """
uvx vulture \
    --min-confidence 80 \
    --exclude '.flox,.venv,target' \
    .
"""

[tasks."python:lint"]
depends = ["python:dead-code"]
description = "Run Python code quality checks"
# temporarily commented out ty check due to hanging failure
run = """
ruff check \
    --output-format=github \
    .
# uvx ty check
"""

[tasks."python:test"]
description = "Run Python tests"
run = """
mkdir -p coverage_output
docker compose --file tests.yaml down --volumes --remove-orphans
docker compose --file tests.yaml build tests
docker compose --file tests.yaml run --rm --no-TTY tests
docker compose --file tests.yaml down --volumes --remove-orphans
"""

[tasks."lint"]
depends = ["python:lint"]
description = "Run code quality checks"
run = """
nu linter.nu
yamllint -d "{extends: relaxed, rules: {line-length: {max: 110}}}" . 
"""

[tasks."infrastructure:up"]
description = "Launch cloud infrastructure"
# temporarily comment out ping test due to non-exposed endpoints
run = """
set -e
cd infrastructure
uv run pulumi up --yes --stack pocketsizefund/pocketsizefund/production
pulumi stack output KUBECONFIG  > kubeconfig.json
export KUBECONFIG=<(pulumi stack output KUBECONFIG)
# nu ping.nu
"""

[tasks."infrastructure:down"]
description = "Teardown cloud infrastructure"
run = """
set -e
cd infrastructure
uv run pulumi down --yes --stack pocketsizefund/pocketsizefund/production
"""
