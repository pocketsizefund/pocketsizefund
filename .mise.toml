[env]
COMPOSE_BAKE=true

[tasks."python:install"]
description = "Install Python dependencies"
run = "uv sync --all-packages"

[tasks."python:format"]
description = "Format Python code"
run = "ruff format"

[tasks."python:dead-code"]
depends = ["python:format"]
description = "Check for dead Python code"
run = """
vulture \
    --min-confidence 80 \
    --exclude '.flox,.venv,target' \
    .
"""

[tasks."python:lint"]
depends = ["python:dead-code"]
description = "Run Python code quality checks"
run = """
ruff check \
    --output-format=github \
    .
"""

[tasks."python:test"]
description = "Run Python tests"
run = """
uv run coverage run \
    --parallel-mode \
    --omit '*/__init__.py,**/test_*.py' \
    --data-file .python_coverage.output \
    --module pytest

uv run coverage combine \
    --data-file .python_coverage.output

uv run coverage report \
    --data-file .python_coverage.output

uv run coverage xml \
    --data-file .python_coverage.output \
    -o .python_coverage.xml
"""


[tasks."python:test:behave"]
description = "Run behave end-to-end tests"
run = """
cd application/{{arg(name="application_name")}}
uv run behave features/
"""


[tasks."application:build"]
description = "Build the application service"
run = """
TIMESTAMP=$(date +%Y%m%d) 
docker build \
--file application/{{arg(name="application_name")}}/Dockerfile \
--tag pocketsizefund/{{arg(name="application_name")}}:latest \
--tag pocketsizefund/{{arg(name="application_name")}}:${TIMESTAMP} \
.
"""

[tasks."application:run"]
description = "Run the application service"
run = """
docker run \
--env-file .env \
--publish 8080:8080 \
pocketsizefund/{{arg(name="application_name")}}:latest \
"""

[tasks."application:dev"]
description = "Run the application service locally with hot reloading"
run = """
cd application/{{arg(name="application_name")}}
uv run uvicorn src.{{arg(name="application_name")}}.main:application --reload
"""

[tasks."application:test"]
description = "Run integration tests"
run = """
cd application/{{arg(name="application_name")}}
docker-compose up --build --abort-on-container-exit --remove-orphans
"""

[tasks."lint"]
depends = ["python:lint"]
description = "Run code quality checks"
run = """
yamllint .
"""

[tasks."infrastructure:up"]
description = "launch cloud infrastructure"
run = """
cd infrastructure
uv run pulumi up --yes
"""

